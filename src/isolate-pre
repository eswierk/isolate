#!/bin/bash
#
# Copyright 2013, 2014 Big Switch Networks, Inc.
# Copyright 2014 Skyport Systems, Inc.
#

pid1=$1

shopt -s extglob
# Serialize execution of isolate-pre and isolate-post to avoid race
# conditions when finding an unused IP address pair
exec 200<$0
flock 200

# Find a pair of IP addresses that are unique within this container
while read ip0 dev0; do
    [ -z "${dev0##iso+([0-9])}" ] || continue
    read ip1 dev1
    [ -e /sys/class/net/${dev0} ] || [ $(ip addr show to ${ip0}/31 | wc -l) -gt 0 ] || break
done </etc/hosts
cat >/run/isolate${pid1}.conf <<EOF
dev0=${dev0}
dev1=${dev1}
ip0=${ip0}
ip1=${ip1}
EOF

# Clean up leftovers from a previous ungraceful exit
while iptables -D FORWARD -i ${dev0} -j ACCEPT 2>/dev/null; do :; done
while iptables -D FORWARD -o ${dev0} -m state --state ESTABLISHED,RELATED -j ACCEPT 2>/dev/null; do :; done
while iptables -t nat -D POSTROUTING -s ${ip1}/32 -j MASQUERADE 2>/dev/null; do :; done
kill $(lsof -t -i @${ip0}) 2>/dev/null

# Create a veth interface pair and push one end into the container
ip link add name ${dev0} type veth peer name ${dev1} netns ${pid1}
udevadm settle

# Set the IP address of the host end
ip addr add ${ip0}/31 dev ${dev0}
ip link set ${dev0} up

# Use iptables to NAT traffic between the container and everywhere else
iptables -t nat -A POSTROUTING -s ${ip1}/32 -j MASQUERADE
[ "$(sysctl -n net.ipv4.ip_forward)" = 1 ] || echo "WARNING: kernel parameter net.ipv4.ip_forward is disabled" >&2

# In case iptables is dropping routed packets by default, allow routing
# packets from connections that originate from within the container
iptables -A FORWARD -i ${dev0} -j ACCEPT
iptables -A FORWARD -o ${dev0} -m state --state ESTABLISHED,RELATED -j ACCEPT

# Relay DNS queries from the container to the configured upstream resolver
dnsmasq --conf-file=/dev/null --pid-file=/run/isolate${pid1}-dnsmasq.pid --log-facility=/run/isolate${pid1}-dnsmasq.log --bind-interfaces --listen-address=${ip0} --no-hosts
